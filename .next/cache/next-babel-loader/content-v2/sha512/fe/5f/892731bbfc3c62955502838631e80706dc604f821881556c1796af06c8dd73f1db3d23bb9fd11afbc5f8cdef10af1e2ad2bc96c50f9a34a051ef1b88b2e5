{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\LUVSILVA\\\\04_Ferramentas_OFFICE\\\\44_Projeto_React\\\\nextmove-next\\\\src\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { useChallenges } from \"../hooks/useChallenges\";\nvar countdownTimeout;\nexport var CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useChallenges = useChallenges(),\n      startNewChallenge = _useChallenges.startNewChallenge;\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  useEffect(function () {\n    window.onbeforeunload = function () {\n      if (isActive) {\n        return 'Você perderá o progresso do countdown até aqui, tem certeza?';\n      }\n    };\n  }, [isActive]);\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      startNewChallenge();\n      setHasFinished(true);\n      setIsActive(false);\n    }\n  }, [isActive, time]);\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    setHasFinished(false);\n  }\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      isActive: isActive,\n      resetCountdown: resetCountdown,\n      hasFinished: hasFinished,\n      startCountdown: startCountdown,\n      minutes: minutes,\n      seconds: seconds\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownProvider, \"wEoliHhIXT46H3tikenY/HRBC1M=\", false, function () {\n  return [useChallenges];\n});\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/LUVSILVA/04_Ferramentas_OFFICE/44_Projeto_React/nextmove-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useEffect","useState","useChallenges","countdownTimeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","window","onbeforeunload","setTimeout","startCountdown","resetCountdown","clearTimeout","minutes","Math","floor","seconds"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAeA,IAAIC,gBAAJ;AAEA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASM,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,uBACxCJ,aAAa,EAD2B;AAAA,MAC9DK,iBAD8D,kBAC9DA,iBAD8D;;AAAA,kBAG9CN,QAAQ,CAAC,MAAM,EAAP,CAHsC;AAAA,MAG/DO,IAH+D;AAAA,MAGzDC,OAHyD;;AAAA,mBAItCR,QAAQ,CAAC,KAAD,CAJ8B;AAAA,MAI/DS,QAJ+D;AAAA,MAIrDC,WAJqD;;AAAA,mBAKhCV,QAAQ,CAAC,KAAD,CALwB;AAAA,MAK/DW,WAL+D;AAAA,MAKlDC,cALkD;;AAOtEb,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,MAAM,CAACC,cAAP,GAAwB,YAAM;AAC5B,UAAIL,QAAJ,EAAc;AACZ,eAAO,8DAAP;AACD;AACF,KAJD;AAKD,GANQ,EAMN,CAACA,QAAD,CANM,CAAT;AAQAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBL,MAAAA,gBAAgB,GAAGa,UAAU,CAAC,YAAM;AACjCP,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF2B,EAEzB,IAFyB,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCD,MAAAA,iBAAiB;AACjBM,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GAVQ,EAUN,CAACD,QAAD,EAAWF,IAAX,CAVM,CAAT;;AAYA,WAASS,cAAT,GAA0B;AACxBN,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASO,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAED,MAAMO,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWd,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMe,OAAO,GAAGf,IAAI,GAAG,EAAvB;AAEA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAChCE,MAAAA,QAAQ,EAARA,QADgC;AAEhCQ,MAAAA,cAAc,EAAdA,cAFgC;AAGhCN,MAAAA,WAAW,EAAXA,WAHgC;AAIhCK,MAAAA,cAAc,EAAdA,cAJgC;AAKhCG,MAAAA,OAAO,EAAPA,OALgC;AAMhCG,MAAAA,OAAO,EAAPA;AANgC,KAAlC;AAAA,cAQGjB;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GArDeD,iB;UACgBH,a;;;KADhBG,iB","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\r\nimport { useChallenges } from \"../hooks/useChallenges\";\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface CountdownContextData {\r\n  isActive: boolean;\r\n  hasFinished: boolean;\r\n  minutes: number;\r\n  seconds: number;\r\n  resetCountdown: () => void;\r\n  startCountdown: () => void;\r\n}\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData)\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n  const { startNewChallenge } = useChallenges();\r\n\r\n  const [time, setTime] = useState(0.1 * 60);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.onbeforeunload = () => {\r\n      if (isActive) {\r\n        return 'Você perderá o progresso do countdown até aqui, tem certeza?'\r\n      }\r\n    };\r\n  }, [isActive])\r\n\r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n         setTime(time - 1);\r\n       }, 1000);\r\n    } else if (isActive && time === 0) {\r\n      startNewChallenge();\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n    }\r\n  }, [isActive, time]);\r\n\r\n  function startCountdown() {\r\n    setIsActive(true);\r\n  }\r\n\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60);\r\n    setHasFinished(false);\r\n  }\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  return (\r\n    <CountdownContext.Provider value={{\r\n      isActive,\r\n      resetCountdown,\r\n      hasFinished,\r\n      startCountdown,\r\n      minutes,\r\n      seconds,\r\n    }}>\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}