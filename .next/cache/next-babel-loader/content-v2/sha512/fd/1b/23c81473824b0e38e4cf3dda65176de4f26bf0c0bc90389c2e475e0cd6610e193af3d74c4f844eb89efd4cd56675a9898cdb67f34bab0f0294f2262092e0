{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\LUVSILVA\\\\04_Ferramentas_OFFICE\\\\44_Projeto_React\\\\nextmove-next\\\\src\\\\contexts\\\\CountdownContext.tsx\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { useChallenges } from \"../hooks/useChallenges\";\nlet countdownTimeout;\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useChallenges();\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  useEffect(() => {\n    window.onbeforeunload = () => {\n      if (isActive) {\n        return 'Você perderá o progresso do countdown até aqui, tem certeza?';\n      }\n    };\n  }, [isActive]);\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      startNewChallenge();\n      setHasFinished(true);\n      setIsActive(false);\n    }\n  }, [isActive, time]);\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    setHasFinished(false);\n  }\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      isActive,\n      resetCountdown,\n      hasFinished,\n      startCountdown,\n      minutes,\n      seconds\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/LUVSILVA/04_Ferramentas_OFFICE/44_Projeto_React/nextmove-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useEffect","useState","useChallenges","countdownTimeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","window","onbeforeunload","setTimeout","startCountdown","resetCountdown","clearTimeout","minutes","Math","floor","seconds"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAeA,IAAIC,gBAAJ;AAEA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASM,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AACtE,QAAM;AAAEC,IAAAA;AAAF,MAAwBL,aAAa,EAA3C;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,MAAM,EAAP,CAAhC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,MAAM,CAACC,cAAP,GAAwB,MAAM;AAC5B,UAAIL,QAAJ,EAAc;AACZ,eAAO,8DAAP;AACD;AACF,KAJD;AAKD,GANQ,EAMN,CAACA,QAAD,CANM,CAAT;AAQAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBL,MAAAA,gBAAgB,GAAGa,UAAU,CAAC,MAAM;AACjCP,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF2B,EAEzB,IAFyB,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCD,MAAAA,iBAAiB;AACjBM,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GAVQ,EAUN,CAACD,QAAD,EAAWF,IAAX,CAVM,CAAT;;AAYA,WAASS,cAAT,GAA0B;AACxBN,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASO,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAED,QAAMO,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWd,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMe,OAAO,GAAGf,IAAI,GAAG,EAAvB;AAEA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAChCE,MAAAA,QADgC;AAEhCQ,MAAAA,cAFgC;AAGhCN,MAAAA,WAHgC;AAIhCK,MAAAA,cAJgC;AAKhCG,MAAAA,OALgC;AAMhCG,MAAAA;AANgC,KAAlC;AAAA,cAQGjB;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\r\nimport { useChallenges } from \"../hooks/useChallenges\";\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface CountdownContextData {\r\n  isActive: boolean;\r\n  hasFinished: boolean;\r\n  minutes: number;\r\n  seconds: number;\r\n  resetCountdown: () => void;\r\n  startCountdown: () => void;\r\n}\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData)\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n  const { startNewChallenge } = useChallenges();\r\n\r\n  const [time, setTime] = useState(0.1 * 60);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.onbeforeunload = () => {\r\n      if (isActive) {\r\n        return 'Você perderá o progresso do countdown até aqui, tem certeza?'\r\n      }\r\n    };\r\n  }, [isActive])\r\n\r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n         setTime(time - 1);\r\n       }, 1000);\r\n    } else if (isActive && time === 0) {\r\n      startNewChallenge();\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n    }\r\n  }, [isActive, time]);\r\n\r\n  function startCountdown() {\r\n    setIsActive(true);\r\n  }\r\n\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60);\r\n    setHasFinished(false);\r\n  }\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  return (\r\n    <CountdownContext.Provider value={{\r\n      isActive,\r\n      resetCountdown,\r\n      hasFinished,\r\n      startCountdown,\r\n      minutes,\r\n      seconds,\r\n    }}>\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}